use crate::{Address, Error, Id, InnerError, Kind, PublicKey, SecretKey, TagSet, Timestamp};
use ed25519_dalek::Signature;
use std::cmp::Ordering;
use std::ops::{Deref, DerefMut, Range, RangeFrom};

#[cfg(feature = "json")]
mod json;

mod record_flags;
pub use record_flags::{RecordFlags, SignatureScheme};

/// A `Record` is a digitally signed datum generated by a user,
/// stored in and retrieed from a server, and used by an application,
/// and unsized (borrowed).
///
/// See also `OwnedRecord` for the owned variant.
// INVARIANTS:
//   at least 208 bytes long
//   no more than 1_048_576 bytes long
//   hash is correct
//   signature is correct
//   reserved flags are zero
//   Id is valid (MSBit is clear)
//   Address is valid (valid public key, MSBit is set)
//   208 + tags_padded_len() + payload_padded_len() == self.0.len()
#[derive(Debug, PartialEq, Eq, Hash)]
pub struct Record([u8]);

impl Record {
    // View a slice of bytes as a Record
    fn from_inner<S: AsRef<[u8]> + ?Sized>(s: &S) -> &Record {
        unsafe { &*(std::ptr::from_ref::<[u8]>(s.as_ref()) as *const Record) }
    }

    // View a mutable slice of bytes as a Record
    fn from_inner_mut(inner: &mut [u8]) -> &mut Record {
        // SAFETY: Record is just a wrapper around [u8],
        // therefore converting &mut [u8] to &mut Record is safe.
        unsafe { &mut *(std::ptr::from_mut::<[u8]>(inner) as *mut Record) }
    }

    /// Interpret a sequence of bytes as a `Record`. Checks validity of the length
    /// only.
    ///
    /// Tolerates trailing bytes after the data in the `input`.
    ///
    /// # Errors
    ///
    /// Errors if the input is not long enough, if the length is more than `1_048_576`
    /// bytes, if either of the public keys is invalid, if the hash is invalid, if the
    /// signature is invalid, if the timestamps are invalid, or if reserved flags are
    /// set.
    pub fn from_bytes(input: &[u8]) -> Result<&Record, Error> {
        let record = unsafe { Self::from_bytes_unchecked(input)? };
        record.verify()?;
        Ok(record)
    }

    /// Interpret a sequence of bytes as a `Record`. Checks validity of the length
    /// only.
    ///
    /// # Errors
    ///
    /// Errors if the input is not long enough or if the length is more than `1_048_576`
    /// bytes.
    ///
    /// # Safety
    ///
    /// Bytes must be a valid `Record`, otherwise undefined results can occur including
    /// panics
    #[allow(clippy::missing_panics_doc)]
    pub unsafe fn from_bytes_unchecked(input: &[u8]) -> Result<&Record, Error> {
        if input.len() < HEADER_LEN {
            return Err(InnerError::EndOfInput.into());
        }
        let unpadded_tag_len = u16::from_le_bytes(input[LEN_T_RANGE].try_into().unwrap()) as usize;
        let padded_tag_len = padded_len!(unpadded_tag_len);
        let unpadded_payload_len =
            u32::from_le_bytes(input[LEN_P_RANGE].try_into().unwrap()) as usize;
        let padded_payload_len = padded_len!(unpadded_payload_len);

        let len = HEADER_LEN + padded_tag_len + padded_payload_len;
        if len > 1_048_576 {
            return Err(InnerError::RecordTooLong.into());
        }

        let unverified = Self::from_inner(&input[..len]);
        Ok(unverified)
    }

    /// As bytes
    #[must_use]
    pub fn as_bytes(&self) -> &[u8] {
        &self.0
    }

    /// Write a `Record` to the buffer, assembled from the `parts`
    ///
    /// # Errors
    ///
    /// Returns an `Err` if any data is too long, if the buffer is too small,
    /// if reserved flags are set, or if signing fails.
    pub fn write_record<'a>(
        buffer: &'a mut [u8],
        parts: &RecordParts,
    ) -> Result<&'a Record, Error> {
        // Data checks
        if parts.flags | RecordFlags::all() != RecordFlags::all() {
            return Err(InnerError::ReservedFlagsUsed.into());
        }
        if parts.tag_set.as_bytes().len() > 65_536 {
            return Err(InnerError::RecordTooLong.into());
        }

        // Length checks
        let padded_tags_len = padded_len!(parts.tag_set.as_bytes().len());
        let padded_payload_len = padded_len!(parts.payload.len());
        let len = HEADER_LEN + padded_tags_len + padded_payload_len;
        if len > 1_048_576 {
            return Err(InnerError::RecordTooLong.into());
        }
        if buffer.len() < len {
            return Err(InnerError::EndOfOutput.into());
        }

        let tag_end = HEADER_LEN + padded_tags_len;

        let address = parts.address_data.address();

        // Copy in payload
        buffer[tag_end..tag_end + parts.payload.len()].copy_from_slice(parts.payload);

        // Copy in tags
        buffer[HEADER_LEN..HEADER_LEN + parts.tag_set.as_bytes().len()]
            .copy_from_slice(parts.tag_set.as_bytes());

        // Write LenP
        #[allow(clippy::cast_possible_truncation)]
        let payload_len = parts.payload.len() as u32;
        buffer[LEN_P_RANGE].copy_from_slice(payload_len.to_le_bytes().as_slice());

        // Write LenT
        #[allow(clippy::cast_possible_truncation)]
        let tags_len = parts.tag_set.as_bytes().len() as u16;
        buffer[LEN_T_RANGE].copy_from_slice(tags_len.to_le_bytes().as_slice());

        // Write flags
        buffer[FLAGS_RANGE].copy_from_slice(parts.flags.bits().to_le_bytes().as_slice());

        // Write timestamp
        buffer[TIMESTAMP_RANGE].copy_from_slice(parts.timestamp.to_bytes().as_slice());

        // Write address
        buffer[ADDR_RANGE].copy_from_slice(address.as_bytes().as_slice());

        // Write the signing key
        let signing_key = match parts.signing_data {
            RecordSigningData::SecretKey(ref secret_key) => secret_key.public(),
            RecordSigningData::PublicKeyAndSignature(signing_key, _) => signing_key,
        };
        buffer[SIGNING_KEY_RANGE].copy_from_slice(signing_key.as_bytes().as_slice());

        // Compute the truehash
        let mut truehash: [u8; 64] = [0; 64];
        let mut hasher = blake3::Hasher::new();
        let _ = hasher.update(&buffer[HASHABLE_RANGE]);
        hasher.finalize_xof().fill(&mut truehash[..]);

        // Write ID
        buffer[ID_HASH_RANGE].copy_from_slice(&truehash[..40]);
        buffer[ID_TIMESTAMP_RANGE].copy_from_slice(parts.timestamp.to_bytes().as_slice());

        // Write the signature
        let sig = match parts.signing_data {
            RecordSigningData::SecretKey(ref secret_key) => {
                let digest = crate::crypto::Blake3 { h: hasher };
                secret_key
                    .to_signing_key()
                    .sign_prehashed(digest, Some(b"Mosaic"))?
            }
            RecordSigningData::PublicKeyAndSignature(_, signature) => signature,
        };
        buffer[SIG_RANGE].copy_from_slice(sig.to_bytes().as_slice());

        let record = Record::from_inner(&buffer[..len]);
        if cfg!(debug_assertions) {
            record.verify()?;
        }

        Ok(record)
    }

    /// Verify invariants. You should not normally need to call this; all code paths
    /// that instantiate a `Record` object call this.
    ///
    /// # Errors
    ///
    /// Returns an `Err` if the length is too short (<`216`) too long (>`1_048_576`),
    /// if the sum of the sections (header, tags, and payload) doesn't equal the
    /// length, if either public key is invalid, if the hash is wrong, if the
    /// signature is wrong, if the timestamp is out of range, or if any reserved
    /// area is not zeroed.
    #[allow(clippy::missing_panics_doc)]
    pub fn verify(&self) -> Result<(), Error> {
        // Verify all lengths
        if self.0.len() > 1_048_576 {
            return Err(InnerError::RecordTooLong.into());
        }
        if self.0.len() < HEADER_LEN {
            return Err(InnerError::RecordTooShort.into());
        }
        if HEADER_LEN + self.tag_set_padded_len() + self.payload_padded_len() != self.0.len() {
            return Err(InnerError::RecordSectionLengthMismatch.into());
        }

        // Verify PublicKey validity
        let signing_public_key =
            PublicKey::from_bytes(self.0[SIGNING_KEY_RANGE].try_into().unwrap())?;
        let _author_public_key =
            PublicKey::from_bytes(self.0[ADDR_AUTHOR_KEY_RANGE].try_into().unwrap())?;

        // Compute the true hash
        // (note we don't use fn full_hash() because we need to
        //  reuse the hasher to verify the signature)
        let mut truehash: [u8; 64] = [0; 64];
        let mut hasher = blake3::Hasher::new();
        let _ = hasher.update(&self.0[HASHABLE_RANGE]);
        hasher.finalize_xof().fill(&mut truehash[..]);

        // Compare the start of the true hash to the claimed hash
        if truehash[..40] != self.0[ID_HASH_RANGE] {
            return Err(InnerError::HashMismatch.into());
        }

        // Verify the timestamps
        let id_timestamp = Timestamp::from_bytes(self.0[ID_TIMESTAMP_RANGE].try_into().unwrap())?;
        let timestamp = Timestamp::from_bytes(self.0[TIMESTAMP_RANGE].try_into().unwrap())?;
        if id_timestamp != timestamp {
            return Err(InnerError::TimestampMismatch.into());
        }

        // Verify the signature
        let signature = Signature::from_slice(&self.0[SIG_RANGE])?;
        let digest = crate::crypto::Blake3 { h: hasher };
        signing_public_key
            .to_verifying_key()
            .verify_prehashed_strict(digest, Some(b"Mosaic"), &signature)?;

        // Verify reserved flags are 0
        let flags = self.flags();
        if flags | RecordFlags::all() != RecordFlags::all() {
            return Err(InnerError::ReservedFlagsUsed.into());
        }

        Ok(())
    }

    /// Signature
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn signature(&self) -> Signature {
        Signature::from_slice(&self.0[SIG_RANGE]).unwrap()
    }

    /// The full 64-byte BLAKE3 hash of the contents `[112:]`
    #[must_use]
    pub fn full_hash(&self) -> [u8; 64] {
        let mut truehash: [u8; 64] = [0; 64];
        let mut hasher = blake3::Hasher::new();
        let _ = hasher.update(&self.0[HASHABLE_RANGE]);
        hasher.finalize_xof().fill(&mut truehash[..]);
        truehash
    }

    /// Id
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn id(&self) -> Id {
        unsafe { Id::from_bytes_unchecked(self.0[ID_RANGE].try_into().unwrap()) }
    }

    /// Address
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn address(&self) -> Address {
        unsafe { Address::from_bytes_unchecked(self.0[ADDR_RANGE].try_into().unwrap()) }
    }

    /// Signing `PublicKey`
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn signing_public_key(&self) -> PublicKey {
        unsafe { PublicKey::from_bytes_unchecked(self.0[SIGNING_KEY_RANGE].try_into().unwrap()) }
    }

    /// Author `PublicKey`
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn author_public_key(&self) -> PublicKey {
        unsafe {
            PublicKey::from_bytes_unchecked(self.0[ADDR_AUTHOR_KEY_RANGE].try_into().unwrap())
        }
    }

    /// Kind
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn kind(&self) -> Kind {
        Kind::from_bytes(self.0[ADDR_KIND_RANGE].try_into().unwrap())
    }

    /// Nonce
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn nonce(&self) -> &[u8; 8] {
        self.0[ADDR_NONCE_RANGE].try_into().unwrap()
    }

    /// Flags
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn flags(&self) -> RecordFlags {
        RecordFlags::from_bits_retain(u16::from_le_bytes(self.0[FLAGS_RANGE].try_into().unwrap()))
    }

    /// `Timestamp`
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn timestamp(&self) -> Timestamp {
        unsafe { Timestamp::from_bytes_unchecked(self.0[TIMESTAMP_RANGE].try_into().unwrap()) }
    }

    /// `TagSet` length
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn tag_set_len(&self) -> usize {
        u16::from_le_bytes(self.0[LEN_T_RANGE].try_into().unwrap()) as usize
    }

    /// `TagSet` padded length
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn tag_set_padded_len(&self) -> usize {
        padded_len!(self.tag_set_len())
    }

    /// `TagSet`
    #[must_use]
    pub fn tag_set(&self) -> &TagSet {
        unsafe {
            TagSet::from_bytes_unchecked(&self.0[HEADER_LEN..HEADER_LEN + self.tag_set_len()])
        }
    }

    /// Payload length
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn payload_len(&self) -> usize {
        u32::from_le_bytes(self.0[LEN_P_RANGE].try_into().unwrap()) as usize
    }

    /// Payload padded length
    #[allow(clippy::missing_panics_doc)]
    #[must_use]
    pub fn payload_padded_len(&self) -> usize {
        padded_len!(self.payload_len())
    }

    /// Payload area bytes
    ///
    /// These are the raw bytes. If Zstd is used, the caller is responsible for
    /// decompressing them.
    #[must_use]
    pub fn payload_bytes(&self) -> &[u8] {
        let start = HEADER_LEN + self.tag_set_padded_len();
        &self.0[start..start + self.payload_len()]
    }
}

const SIG_RANGE: Range<usize> = 0..64;

const ID_RANGE: Range<usize> = 64..112;
const ID_TIMESTAMP_RANGE: Range<usize> = 64..72;
const ID_HASH_RANGE: Range<usize> = 72..112;

const SIGNING_KEY_RANGE: Range<usize> = 112..144;

const ADDR_RANGE: Range<usize> = 144..192;
const ADDR_NONCE_RANGE: Range<usize> = 144..152;
const ADDR_KIND_RANGE: Range<usize> = 152..160;
const ADDR_AUTHOR_KEY_RANGE: Range<usize> = 160..192;

const TIMESTAMP_RANGE: Range<usize> = 192..200;
const FLAGS_RANGE: Range<usize> = 200..202;
const LEN_T_RANGE: Range<usize> = 202..204;
const LEN_P_RANGE: Range<usize> = 204..208;

const HEADER_LEN: usize = 208;
const HASHABLE_RANGE: RangeFrom<usize> = 112..;

impl std::fmt::Display for Record {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "id: {}", self.id().as_printable())?;
        writeln!(f, "  address: {}", self.address().as_printable())?;
        writeln!(
            f,
            "  author key: {}",
            self.author_public_key().as_printable()
        )?;
        writeln!(
            f,
            "  signing key: {}",
            self.signing_public_key().as_printable()
        )?;
        writeln!(f, "  timestamp: {}", self.timestamp())?;
        writeln!(f, "  kind: {}", self.kind())?;
        writeln!(f, "  flags: {}", self.flags())?;
        writeln!(
            f,
            "  tag_set (zbase32): {}",
            z32::encode(self.tag_set().as_bytes())
        )?;
        if self.kind().content_is_printable() {
            writeln!(
                f,
                "  payload: {}",
                String::from_utf8_lossy(self.payload_bytes())
            )?;
        } else {
            writeln!(
                f,
                "  payload (zbase32): {}",
                z32::encode(self.payload_bytes())
            )?;
        }

        Ok(())
    }
}

impl PartialOrd for Record {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for Record {
    fn cmp(&self, other: &Self) -> Ordering {
        // Records sort in ID order, which is time-forward order since timestamps
        // at the start of the ID are big-endian
        self.id().cmp(&other.id())
    }
}

/// An `OwnedRecord` is a digitally signed datum generated by a user,
/// stored in and retrieved from a server, and used by an application,
/// and owned.
///
/// See also `Record` for the borrowed variant.
///
// INVARIANTS:
//   at least 208 bytes long
//   no more than 1_048_576 bytes long
//   hash is correct
//   signature is correct
//   reserved flags are zero
//   208 + tag_set_padded_len() + payload_padded_len() == self.0.len()
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct OwnedRecord(Vec<u8>);

impl OwnedRecord {
    /// Interpret a vector of bytes as a `Record`. Checks validity.
    ///
    /// # Errors
    ///
    /// Returns an `Err` if any verification fails. See `verify()`
    pub fn from_vec(vec: Vec<u8>) -> Result<OwnedRecord, Error> {
        let unverified = OwnedRecord(vec);
        unverified.verify()?;
        Ok(unverified)
    }

    /// Create a new `OwnedRecord` from component parts.
    ///
    /// ```
    /// # use mosaic_core::{EMPTY_TAG_SET, Kind, KindFlags, OwnedRecord, RecordFlags, RecordParts, SecretKey, Timestamp, RecordSigningData, RecordAddressData};
    /// let mut csprng = rand::rngs::OsRng;
    /// let secret_key = SecretKey::generate(&mut csprng);
    /// let public_key = secret_key.public();
    /// let mut parts = RecordParts {
    ///     signing_data: RecordSigningData::SecretKey(secret_key),
    ///     address_data: RecordAddressData::Random(public_key, Kind::EXAMPLE),
    ///     timestamp: Timestamp::now().unwrap(),
    ///     flags: RecordFlags::empty(),
    ///     tag_set: &*EMPTY_TAG_SET,
    ///     payload: &[],
    /// };
    /// let record = OwnedRecord::new(&parts).unwrap();
    /// ```
    //
    /// # Errors
    ///
    /// Returns an `Err` if any data is too long, if reserved flags are set,
    /// or if signing fails.
    #[allow(clippy::missing_panics_doc)]
    pub fn new(parts: &RecordParts) -> Result<OwnedRecord, Error> {
        let len = parts.record_len();
        let mut buffer = vec![0; len];
        let _record = Record::write_record(&mut buffer, parts)?;
        Ok(OwnedRecord(buffer))
    }
}

impl PartialOrd for OwnedRecord {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for OwnedRecord {
    fn cmp(&self, other: &Self) -> Ordering {
        // Records sort in ID order, which is time-forward order since timestamps
        // at the start of the ID are big-endian
        self.id().cmp(&other.id())
    }
}

impl Deref for OwnedRecord {
    type Target = Record;

    fn deref(&self) -> &Self::Target {
        Record::from_inner(&self.0)
    }
}

impl DerefMut for OwnedRecord {
    fn deref_mut(&mut self) -> &mut Self::Target {
        Record::from_inner_mut(&mut self.0)
    }
}

impl AsRef<Record> for OwnedRecord {
    fn as_ref(&self) -> &Record {
        Record::from_inner(&self.0)
    }
}

impl AsMut<Record> for OwnedRecord {
    fn as_mut(&mut self) -> &mut Record {
        Record::from_inner_mut(&mut self.0)
    }
}

impl std::fmt::Display for OwnedRecord {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        std::fmt::Display::fmt(&**self, f)
    }
}

/// Record Signing data, used to assemble a Record
#[derive(Debug, Clone)]
pub enum RecordSigningData {
    /// A `SecretKey`
    SecretKey(SecretKey),

    /// A `PublicKey` and the `Signature` of the record
    PublicKeyAndSignature(PublicKey, Signature),
}

/// Record Address data, used to assemble a Record
#[derive(Debug, Clone)]
pub enum RecordAddressData {
    /// An address
    Address(Address),

    /// A master `PublicKey`, Kind, and deterministic nonce
    Deterministic(PublicKey, Kind, Vec<u8>),

    /// A master `PublicKey` and Kind (the nonce will be random)
    Random(PublicKey, Kind),
}

impl RecordAddressData {
    /// Get the address
    #[must_use]
    pub fn address(&self) -> Address {
        match *self {
            RecordAddressData::Address(a) => a,
            RecordAddressData::Deterministic(pk, kind, ref nonce) => {
                Address::new_deterministic(pk, kind, nonce)
            }
            RecordAddressData::Random(pk, kind) => Address::new_random(pk, kind),
        }
    }
}

/// The parts of a Record
#[derive(Debug, Clone)]
pub struct RecordParts<'a> {
    /// Signing data
    pub signing_data: RecordSigningData,

    /// Address data
    pub address_data: RecordAddressData,

    /// The time
    pub timestamp: Timestamp,

    /// The flags
    pub flags: RecordFlags,

    /// The tag set
    pub tag_set: &'a TagSet,

    /// The payload
    pub payload: &'a [u8],
}

impl RecordParts<'_> {
    /// Compute the length of the record that would be created from these parts
    #[must_use]
    pub fn record_len(&self) -> usize {
        let padded_tag_set_len = padded_len!(self.tag_set.as_bytes().len());
        let padded_payload_len = padded_len!(self.payload.len());
        HEADER_LEN + padded_tag_set_len + padded_payload_len
    }
}

#[cfg(test)]
mod test {
    use crate::*;

    #[test]
    fn test_padded_lengths_idea() {
        // This just tests the idea, not the actual code since it is so embedded.
        for (len, padded) in [(0, 0), (1, 8), (2, 8), (7, 8), (8, 8), (9, 16)] {
            let padded_len = (len + 7) & !7;
            assert_eq!(padded, padded_len);
        }
    }

    #[test]
    fn test_record() {
        use rand::rngs::OsRng;

        let mut csprng = OsRng;

        let signing_secret_key = SecretKey::generate(&mut csprng);
        let signing_public_key = signing_secret_key.public();

        let r1 = OwnedRecord::new(&RecordParts {
            signing_data: RecordSigningData::SecretKey(signing_secret_key.clone()),
            address_data: RecordAddressData::Random(signing_public_key, Kind::KEY_SCHEDULE),
            timestamp: Timestamp::now().unwrap(),
            flags: RecordFlags::empty(),
            tag_set: &EMPTY_TAG_SET,
            payload: b"hello world",
        })
        .unwrap();

        println!("{r1}");

        let r2 = Record::from_bytes(r1.as_bytes()).unwrap();

        println!("r2 built");

        assert_eq!(*r1, *r2);

        let r3 = OwnedRecord::new(&RecordParts {
            signing_data: RecordSigningData::SecretKey(signing_secret_key),
            address_data: RecordAddressData::Random(signing_public_key, Kind::KEY_SCHEDULE),
            timestamp: r1.timestamp() + std::time::Duration::from_millis(10),
            flags: RecordFlags::empty(),
            tag_set: &EMPTY_TAG_SET,
            payload: b"hello world",
        })
        .unwrap();

        assert!(r3 > r1);
    }
}
